name: CI
env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  find-msrv:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.step2.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - id: step2
        run: echo "version=`cat Cargo.toml | sed -n 's/rust-version = "\(.*\)"/\1/p' | xargs`" >> "$GITHUB_OUTPUT"
  benchmarks:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Compile benchmarks (1k)
        run: cargo bench --no-run --bench event_parsing
      - name: Compile benchmarks (100k)
        run: cargo bench --no-run --bench event_parsing_100k
  clippy:
    runs-on: ubuntu-latest
    needs: [rustfmt, no-unused-dependencies, wasm-compatible-common-crate]
    name: nightly Clippy
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install nightly
        uses: dtolnay/rust-toolchain@master
        with:
          components: clippy
          toolchain: nightly
      - uses: taiki-e/install-action@cargo-hack
      - name: Clippy hack
        run: cargo hack --feature-powerset --workspace clippy --benches --examples --tests --no-deps -- -D warnings
  tests:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Dependencies
        run: |
          sudo apt -y install at-spi2-core systemd
      - name: Run Tests (async-io)
        run: cargo test --workspace --no-default-features -- --nocapture
      - name: Run Tests (tokio)
        run: cargo test --workspace --no-default-features --features=tokio -- --nocapture
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - name: Run formatter
        run: cargo fmt --all --check
  rustdoc:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - name: Generate Documentation
        run: cargo doc --workspace --no-deps --document-private-items
  cargo-deny:
    runs-on: ubuntu-latest
    needs: [rustfmt]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Deny
        uses: taiki-e/install-action@cargo-deny
      - name: Check For Unsuitable Licenses
        run: cargo deny check licenses
      - name: Check For Known Security Vulnerabilities
        run: cargo deny check advisories
      - name: Check For Unknown Repositories
        run: cargo deny check sources
  no-unused-dependencies:
    runs-on: ubuntu-latest
    needs: [rustfmt]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Cargo Machete
        uses: taiki-e/install-action@cargo-machete
      - name: Check For Unused Dependencies
        run: cargo machete
  semver-compliance:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Semver Checks
        # no default features so that it uses native Rust TLS instead of trying to link with system TLS.
        uses: taiki-e/install-action@main
        with:
          tool: cargo-semver-checks
      - name: Check Semver Compliance
        run: cargo semver-checks check-release -p atspi --default-features
  msrv-compliance:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies, find-msrv]
    steps:
      - name: install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.find-msrv.outputs.version }}
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Check MSRV Compliance
        run: cargo test --workspace --no-run --all-features
  wasm-compatible-common-crate:
    runs-on: ubuntu-latest
    needs: [rustfmt]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install WASM target(s)
        run: rustup target add wasm32-wasip1 && rustup target add wasm32-unknown-unknown
      - name: Test Common Compilation (wasm32-unknown-unknown)
        run: cargo build -p atspi-common --no-default-features --target wasm32-unknown-unknown
      - name: Test Common Compilation (wasm32-wasip1)
        run: cargo build -p atspi-common --no-default-features --target wasm32-wasip1
  coverage:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Install nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: llvm-tools-preview
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: Install Dependencies
        run: |
          sudo apt -y install at-spi2-core systemd
      - name: cargo llvm-cov
        run: cargo llvm-cov --workspace --locked --lcov --output-path lcov.info
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
  check-true-minimal-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - name: Generate lockfile with minimal direct versions
        # Create a lockfile with minimal direct versions for reproducible builds.
        # See advisory: https://blog.rust-lang.org/2023/08/29/committing-lockfiles/
        run: cargo +nightly generate-lockfile -Z direct-minimal-versions
        
  run-test-atspi-p2p:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout main project
        uses: actions/checkout@v3
        with:
          path: main

      - name: Git checkout test project
        uses: actions/checkout@v3
        with:
          repository: luukvanderduim/test-atspi-p2p
          path: test-atspi-p2p

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable    

      - name: Install Dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install \
            at-spi2-core \
            libatspi2.0-dev \
            xvfb \
            dbus-x11 \
            libgtk-3-dev \
            gir1.2-gtk-3.0 \
            mate-calc \
            gnome-calculator \
            metacity \
            gedit \
            caja \
            gsettings-desktop-schemas

      - name: Setup virtual display and AT-SPI environment
        run: |
          # Start virtual display
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 2
          
          # Set the display for this step
          export DISPLAY=:99

          # Start D-Bus session and export variables
          eval $(dbus-launch --sh-syntax)

          # Start a minimal window manager
          metacity &
          sleep 2

          # Start a desktop shell to provide the root desktop object
          caja &
          sleep 2
          
          # Start AT-SPI bus and registry the standard way
          /usr/libexec/at-spi-bus-launcher --launch-immediately &
          sleep 5
          
          # Explicitly enable accessibility
          gsettings set org.gnome.desktop.interface toolkit-accessibility true
          
          # Export environment for subsequent steps
          echo "DISPLAY=:99" >> $GITHUB_ENV
          echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
          echo "GTK_MODULES=gail:atk-bridge" >> $GITHUB_ENV

      - name: Run P2P test
        working-directory: ./test-atspi-p2p
        run: |
          # Add local crates
          cargo add --path ../main/atspi-connection
          cargo add --path ../main/atspi-common
          cargo add --path ../main/atspi-proxies
          
          # Run with both GTK apps to see which one works
          GTK_MODULES=gail:atk-bridge RUST_LOG=debug cargo run -- gnome-calculator --sleep 5 || \
          GTK_MODULES=gail:atk-bridge RUST_LOG=debug cargo run -- gedit --sleep 5
        env:
          DISPLAY: ${{ env.DISPLAY }}
          DBUS_SESSION_BUS_ADDRESS: ${{ env.DBUS_SESSION_BUS_ADDRESS }}
          GTK_MODULES: gail:atk-bridge
          RUST_BACKTRACE: 1
