name: CI
env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  find-msrv:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.step2.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - id: step2
        run: echo "version=`cat Cargo.toml | sed -n 's/rust-version = "\(.*\)"/\1/p' | xargs`" >> "$GITHUB_OUTPUT"
  benchmarks:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Compile benchmarks (1k)
        run: cargo bench --no-run --bench event_parsing
      - name: Compile benchmarks (100k)
        run: cargo bench --no-run --bench event_parsing_100k
  clippy:
    runs-on: ubuntu-latest
    needs: [rustfmt, no-unused-dependencies, wasm-compatible-common-crate]
    name: nightly Clippy
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install nightly
        uses: dtolnay/rust-toolchain@master
        with:
          components: clippy
          toolchain: nightly
      - uses: taiki-e/install-action@cargo-hack
      - name: Clippy hack
        run: cargo hack --feature-powerset --workspace clippy --benches --examples --tests --no-deps -- -D warnings
  tests:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Dependencies
        run: |
          sudo apt -y install at-spi2-core systemd
      - name: Run Tests (async-io)
        run: cargo test --workspace --no-default-features -- --nocapture
      - name: Run Tests (tokio)
        run: cargo test --workspace --no-default-features --features=tokio -- --nocapture
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - name: Run formatter
        run: cargo fmt --all --check
  rustdoc:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - name: Generate Documentation
        run: cargo doc --workspace --no-deps --document-private-items
  cargo-deny:
    runs-on: ubuntu-latest
    needs: [rustfmt]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Deny
        uses: taiki-e/install-action@cargo-deny
      - name: Check For Unsuitable Licenses
        run: cargo deny check licenses
      - name: Check For Known Security Vulnerabilities
        run: cargo deny check advisories
      - name: Check For Unknown Repositories
        run: cargo deny check sources
  no-unused-dependencies:
    runs-on: ubuntu-latest
    needs: [rustfmt]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Cargo Machete
        uses: taiki-e/install-action@cargo-machete
      - name: Check For Unused Dependencies
        run: cargo machete
  semver-compliance:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Semver Checks
        # no default features so that it uses native Rust TLS instead of trying to link with system TLS.
        uses: taiki-e/install-action@main
        with:
          tool: cargo-semver-checks
      - name: Check Semver Compliance
        run: cargo semver-checks check-release -p atspi --default-features
  msrv-compliance:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies, find-msrv]
    steps:
      - name: install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.find-msrv.outputs.version }}
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Check MSRV Compliance
        run: cargo test --workspace --no-run --all-features
  wasm-compatible-common-crate:
    runs-on: ubuntu-latest
    needs: [rustfmt]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install WASM target(s)
        run: rustup target add wasm32-wasip1 && rustup target add wasm32-unknown-unknown
      - name: Test Common Compilation (wasm32-unknown-unknown)
        run: cargo build -p atspi-common --no-default-features --target wasm32-unknown-unknown
      - name: Test Common Compilation (wasm32-wasip1)
        run: cargo build -p atspi-common --no-default-features --target wasm32-wasip1
  coverage:
    runs-on: ubuntu-latest
    needs: [clippy, no-unused-dependencies]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Install nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: llvm-tools-preview
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: Install Dependencies
        run: |
          sudo apt -y install at-spi2-core systemd
      - name: cargo llvm-cov
        run: cargo llvm-cov --workspace --locked --lcov --output-path lcov.info
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
  check-true-minimal-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - name: Generate lockfile with minimal direct versions
        # Create a lockfile with minimal direct versions for reproducible builds.
        # See advisory: https://blog.rust-lang.org/2023/08/29/committing-lockfiles/
        run: cargo +nightly generate-lockfile -Z direct-minimal-versions
  run-test-atspi-p2p:
    runs-on: ubuntu-latest
    needs: [clippy]
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Cache cargo home
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-home
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-x86_64-unknown-linux-gnu-build-${{ env.cache-name }}-
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Dependencies
        run: |
          sudo apt -y update
          sudo apt -y install \
            at-spi2-core \
            at-spi2-common \
            libatspi2.0-dev \
            xvfb \
            dbus-x11 \
            libgtk-3-dev \
            gir1.2-gtk-3.0 \
            gedit \
            evince \
            eog
            - name: Setup virtual display and AT-SPI environment
            run: |
              # Start virtual display
              Xvfb :99 -screen 0 1024x768x24 &
              export DISPLAY=:99
              
              # Start D-Bus session
              eval $(dbus-launch --sh-syntax)
              export DBUS_SESSION_BUS_ADDRESS
              
              # Start AT-SPI registry via bus launcher (this handles everything)
              DISPLAY=:99 /usr/libexec/at-spi-bus-launcher --launch-immediately &
              sleep 3
              
              # Create test files
              echo "Hello World" > test.txt
              echo "%PDF-1.4" > test.pdf
              
              # Export environment for subsequent steps
              echo "DISPLAY=:99" >> $GITHUB_ENV
              echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
              echo "AT_SPI_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
      - name: Clone P2P test repository
        uses: actions/checkout@v3
        with:
          repository: luukvanderduim/test-atspi-p2p
          path: test-atspi-p2p
      - name: Run P2P functionality test
        run: |
          cd test-atspi-p2p
          # Use the local atspi crates instead of published ones
          cargo add --manifest-path Cargo.toml --path ../atspi-connection atspi-connection
          cargo add --manifest-path Cargo.toml --path ../atspi-common atspi-common
          cargo add --manifest-path Cargo.toml --path ../atspi-proxies atspi-proxies
          cargo run --manifest-path Cargo.toml
        env:
          # Ensure we have a display for AT-SPI
          DISPLAY: :99
      - name: Setup virtual display
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 2
          # Set environment and run test
          export DISPLAY=:99
          export RUST_BACKTRACE=1
          timeout 60 cargo run --manifest-path Cargo.toml

